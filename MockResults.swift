///
/// @Generated by Mockolo
///



import RealmSwift
import RxSwift
import SDWebImage
import UIKit
import Unio


class HotPepperRepositoryTypeMock: HotPepperRepositoryType {
    init() { }


    private(set) var searchCallCount = 0
    var searchHandler: (([String: Any]) -> (Observable<HotPepperResponse>))?
    func search(keyValue: [String: Any]) -> Observable<HotPepperResponse> {
        searchCallCount += 1
        if let searchHandler = searchHandler {
            return searchHandler(keyValue)
        }
        return Observable<HotPepperResponse>.empty()
    }
}

class RealmManagerTypeMock: RealmManagerType {
    init() { }


    private(set) var addEntityCallCount = 0
    var addEntityHandler: ((Any, @escaping (RealmStatus) -> Void) -> ())?
    func addEntity<T: Object>(object: T, completion: @escaping (RealmStatus) -> Void)  {
        addEntityCallCount += 1
        if let addEntityHandler = addEntityHandler {
            addEntityHandler(object, completion)
        }
        
    }

    private(set) var deleteOneObjectCallCount = 0
    var deleteOneObjectHandler: ((Any, String, @escaping (RealmStatus) -> Void) -> ())?
    func deleteOneObject<T: Object>(type: T.Type, name: String, completion: @escaping (RealmStatus) -> Void)  {
        deleteOneObjectCallCount += 1
        if let deleteOneObjectHandler = deleteOneObjectHandler {
            deleteOneObjectHandler(type, name, completion)
        }
        
    }

    private(set) var deleteEntityCallCount = 0
    var deleteEntityHandler: ((Any) -> ())?
    func deleteEntity<T: Object>(object: T)  {
        deleteEntityCallCount += 1
        if let deleteEntityHandler = deleteEntityHandler {
            deleteEntityHandler(object)
        }
        
    }

    private(set) var deleteObjectCallCount = 0
    var deleteObjectHandler: ((Any) -> ())?
    func deleteObject<T: Object>(type: T.Type)  {
        deleteObjectCallCount += 1
        if let deleteObjectHandler = deleteObjectHandler {
            deleteObjectHandler(type)
        }
        
    }

    private(set) var getEntityListCallCount = 0
    var getEntityListHandler: ((Any) -> (Any))?
    func getEntityList<T: Object>(type: T.Type) -> Results<T> {
        getEntityListCallCount += 1
        if let getEntityListHandler = getEntityListHandler {
            return getEntityListHandler(type) as! Results<T>
        }
        fatalError("getEntityListHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var filterEntityListCallCount = 0
    var filterEntityListHandler: ((Any, String, Any) -> (Any))?
    func filterEntityList<T: Object>(type: T.Type, property: String, filter: Any) -> Results<T> {
        filterEntityListCallCount += 1
        if let filterEntityListHandler = filterEntityListHandler {
            return filterEntityListHandler(type, property, filter) as! Results<T>
        }
        fatalError("filterEntityListHandler returns can't have a default value thus its handler must be set")
    }
}

